#!/usr/bin/env python

import warnings
warnings.filterwarnings('ignore')

import sys
import os.path
from pathlib import Path

import qiime2
from qiime2.core.archive.provenance_lib import ProvDAG

from artifinder import __version__ as artifinder_version


def _artifinder(target_result_fp, search_dir, verbose=True):
    prov_dag = ProvDAG(target_result_fp, verbose=verbose)

    observed_uuids = {
        qiime2.Artifact.peek(fp).uuid: fp.absolute()
        for fp in search_dir.glob('**/*.qz[av]')}

    print('')
    print('Target `Result` UUID(s):')
    for e in prov_dag.terminal_uuids:
        print(f' * {e} ({target_result_fp.absolute()})')

    print('')
    print('Predecessor `Results`:')
    for n in prov_dag.collapsed_view:
        node_data = prov_dag.get_node_data(n)
        print(f' * {n}')
        print(f'  * {node_data.type}')
        try:
            print(f'  * {observed_uuids[n]}')
        except KeyError:
            print(f'  * Result not found in search path.')

    print('')
    print('---')
    print(f'Run with `artifinder` version: {artifinder_version}')

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print('USAGE: artifinder target-result-fp search-dir')
        print(f'Arguments provided: {len(sys.argv)-1}')
        exit(0)

    target_result_fp = Path(sys.argv[1])
    search_dir = Path(sys.argv[2])

    if not target_result_fp.exists():
        raise FileNotFoundError("Specified Q2 Result file path does not exist: "
                                f"{target_result_fp}")

    if not search_dir.exists():
        raise FileNotFoundError("Specified search directory does not exist: "
                                f"{search_dir}")

    _artifinder(target_result_fp, search_dir)